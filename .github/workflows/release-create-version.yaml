name: Release - Create Version

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version Type (major/minor/patch)'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  create_version:
    name: Create Release Version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Check user permissions
        uses: actions/github-script@v7
        with:
          script: |
            const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.actor
            });
            
            if (!['admin', 'write'].includes(permission.permission)) {
              core.setFailed('Only repository maintainers can trigger this workflow');
              return;
            }

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Create new version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION_TYPE: ${{ github.event.inputs.version_type }}
        run: |
          # Get current version
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Remove 'v' prefix
          CURRENT_VERSION=${CURRENT_VERSION#v}
          
          # Split version into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Calculate new version based on input type
          case $VERSION_TYPE in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
          esac
          
          # Create new version tag
          NEW_TAG="v${NEW_VERSION}"
          
          # Create version commit and tag
          echo $NEW_VERSION > VERSION
          git add VERSION
          git commit -m "chore: bump version to $NEW_VERSION"
          git tag -a $NEW_TAG -m "Release $NEW_TAG"
          
          # Push changes back to main branch
          git push origin main --follow-tags

      - name: Create Release
        uses: actions/github-script@v7
        with:
          script: |
            const newVersion = require('fs').readFileSync('VERSION', 'utf8').trim();
            const tagName = `v${newVersion}`;

            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `${tagName}`,
              body: `${tagName}`,
              draft: false,
              prerelease: false,
              generate_release_notes: true
            });

      - name: Save tag as artifact
        run: echo "${{ steps.version.outputs.version }}" > tag.txt
      
      - name: Upload tag artifact
        uses: actions/upload-artifact@v4
        with:
          name: tag
          path: tag.txt

      - name: Report status
        if: ${{ success() }}
        run: |
          echo "Pipeline executed successfully."

