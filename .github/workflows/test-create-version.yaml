name: Test - Create Version

on:
  workflow_dispatch:
    inputs:
      pull_request_number:
        description: 'Pull Request Number'
        required: true

jobs:
  create_version:
    name: Create Test Version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      tag: ${{ steps.version_info.outputs.tag }}

    steps:
      - name: Check user permissions
        uses: actions/github-script@v7
        with:
          script: |
            const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.actor
            });

            if (!['admin', 'write'].includes(permission.permission)) {
              core.setFailed('Only repository maintainers can trigger this workflow');
              return;
            }

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Create new version
        id: create_new_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.inputs.pull_request_number }}
        run: |
          # Fetch the PR branch
          PR_DATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")

          PR_BRANCH=$(echo $PR_DATA | jq -r .head.ref)

          # Checkout PR branch
          git fetch origin $PR_BRANCH
          git checkout $PR_BRANCH

          # Sanitize branch name (remove special characters and convert to lowercase)
          BRANCH_NAME=$(echo $PR_BRANCH | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g')

          # Fetch all tags
          git fetch --tags

          # Get the latest version number for the current branch
          LATEST_VERSION=$(git tag --list "v*-${BRANCH_NAME}-test" | sed 's/v\([0-9.]*\).*/\1/' | sort -V | tail -n 1)

          # Set default version if no tags exist
          if [[ -z "$LATEST_VERSION" ]]; then
              CURRENT_VERSION="0.0.0"
          else
              CURRENT_VERSION=$LATEST_VERSION
          fi

          # Split version into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Always increment patch version
          NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"

          # Create new version with branch name
          FULL_VERSION="${NEW_VERSION}-${BRANCH_NAME}-test"
          NEW_TAG="v${FULL_VERSION}"

          # Check if tag already exists
          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "Tag $NEW_TAG already exists. Incrementing version..."
            PATCH=$((PATCH + 1))
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
            FULL_VERSION="${NEW_VERSION}-${BRANCH_NAME}-test"
            NEW_TAG="v${FULL_VERSION}"
          fi

          # Create tag
          git tag -a $NEW_TAG -m "$NEW_TAG"

          # Push tag back to PR branch
          git push origin $NEW_TAG

          echo "Created new version: $FULL_VERSION"
          echo "version=$FULL_VERSION" >> $GITHUB_OUTPUT

      - name: Update PR with version info
        id: version_info
        uses: actions/github-script@v7
        with:
          script: |
            const newVersion = '${{ steps.create_new_version.outputs.version }}';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.inputs.pull_request_number }},
              body: `üè∑Ô∏è New version generated: v${newVersion}`
            });

            core.setOutput('tag', newVersion)

      - name: Report status
        if: ${{ success() }}
        run: |
          echo "Pipeline executed successfully."

  build_docker:
    name: Build Docker Image
    needs: create_version
    permissions:
      packages: write
      contents: read
      id-token: write
      attestations: write
    uses: ./.github/workflows/test-build-docker-image.yaml
    with:
      tag: ${{ needs.create_version.outputs.tag }}
    secrets: inherit
