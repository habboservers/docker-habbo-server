name: Test - Create Version

on:
  workflow_dispatch:
    inputs:
      pull_request_number:
        description: 'Pull Request Number'
        required: true

jobs:
  create_version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Check user permissions
        uses: actions/github-script@v7
        with:
          script: |
            const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.actor
            });

            if (!['admin', 'write'].includes(permission.permission)) {
              core.setFailed('Only repository maintainers can trigger this workflow');
              return;
            }

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Create new version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.inputs.pull_request_number }}
        run: |
          # Fetch the PR branch
          PR_DATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")

          PR_BRANCH=$(echo $PR_DATA | jq -r .head.ref)

          # Checkout PR branch
          git fetch origin $PR_BRANCH
          git checkout $PR_BRANCH

          # Clean branch name: remove prefixes and special characters
          CLEAN_BRANCH=$(echo $PR_BRANCH | sed 's/.*\///' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g')

          # Find existing versions for this branch
          EXISTING_TAGS=$(git tag -l "*-${CLEAN_BRANCH}")

          if [ -z "$EXISTING_TAGS" ]; then
            # No existing tags for this branch, start with 0.0.1
            NEW_VERSION="0.0.1"
          else
            # Get the latest version number for this branch
            LATEST_VERSION=$(echo "$EXISTING_TAGS" | sort -V | tail -n1 | sed "s/-${CLEAN_BRANCH}//")
            
            # Extract the patch number and increment it
            PATCH=$(echo $LATEST_VERSION | cut -d. -f3)
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="0.0.${NEW_PATCH}"
          fi

          # Create new version with branch name
          FULL_VERSION="${NEW_VERSION}-${CLEAN_BRANCH}"

          # Create version commit and tag
          echo $FULL_VERSION > VERSION
          git add VERSION
          git commit -m "chore: bump version to $FULL_VERSION"
          git tag -a $FULL_VERSION -m "$FULL_VERSION"

          # Push changes back to PR branch
          git push origin $PR_BRANCH --follow-tags

          echo "Created new version: $FULL_VERSION"

      - name: Update PR with version info
        uses: actions/github-script@v7
        with:
          script: |
            const newVersion = require('fs').readFileSync('VERSION', 'utf8').trim();

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.inputs.pull_request_number }},
              body: `üè∑Ô∏è New version generated: v${newVersion}`
            });

      - name: Report status
        if: ${{ success }}
        run: |
          echo "Pipeline executed successfully."
